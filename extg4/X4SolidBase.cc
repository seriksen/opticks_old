#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <cstring>

#include "X4Mesh.hh"
#include "X4Solid.hh"
#include "G4VSolid.hh"
#include "PLOG.hh"

// generated by x4-include- Mon Jun 11 20:24:54 HKT 2018 
#include "G4BooleanSolid.hh"
#include "G4MultiUnion.hh"
#include "G4Box.hh"
#include "G4Cons.hh"
#include "G4EllipticalCone.hh"
#include "G4Ellipsoid.hh"
#include "G4EllipticalTube.hh"
#include "G4ExtrudedSolid.hh"
#include "G4Hype.hh"
#include "G4Orb.hh"
#include "G4Para.hh"
#include "G4Paraboloid.hh"
#include "G4Polycone.hh"
#include "G4GenericPolycone.hh"
#include "G4Polyhedra.hh"
#include "G4Sphere.hh"
#include "G4TessellatedSolid.hh"
#include "G4Tet.hh"
#include "G4Torus.hh"
#include "G4GenericTrap.hh"
#include "G4Trap.hh"
#include "G4Trd.hh"
#include "G4Tubs.hh"
#include "G4CutTubs.hh"
#include "G4TwistedBox.hh"
#include "G4TwistedTrap.hh"
#include "G4TwistedTrd.hh"
#include "G4TwistedTubs.hh"

std::string X4SolidBase::desc() const 
{
    std::stringstream ss ; 
    ss << "X4SolidBase" 
       << " name " << m_name
       << " entityType " << m_entityType 
       << " entityName " << m_entityName
       << " root " << m_root
       ;
    return ss.str();
}

G4Hype* X4SolidBase::MakeHyperboloid(const char* name, float rmin , float rmax, float inst, float outst, float hz )
{
    G4double  newInnerRadius = rmin ; 
    G4double  newOuterRadius = rmax ; 
    G4double  newInnerStereo = inst*CLHEP::pi/180. ; 
    G4double  newOuterStereo = outst*CLHEP::pi/180. ; 
    G4double  newHalfLenZ    = hz ; 
    return new G4Hype( name, newInnerRadius, newOuterRadius, newInnerStereo, newOuterStereo, newHalfLenZ ); 
}

G4Ellipsoid* X4SolidBase::MakeEllipsoid(const char* name, float ax, float by, float cz, float zcut1, float zcut2  )
{
    G4double  pxSemiAxis = ax ; 
    G4double  pySemiAxis = by ; 
    G4double  pzSemiAxis = cz ; 
    G4double  pzBottomCut = zcut1 ; 
    G4double  pzTopCut = zcut2 ; 
    return new G4Ellipsoid( name, pxSemiAxis, pySemiAxis, pzSemiAxis, pzBottomCut, pzTopCut ); 
}


G4Torus* X4SolidBase::MakeTorus(const char* name, float R, float r )
{
    G4double Rmin = 0. ; 
    G4double Rmax = r ; 
    G4double Rtor = R ; 
    G4double SPhi = 0. ; 
    G4double DPhi = 2.0*CLHEP::pi ; 
    return new G4Torus( name, Rmin, Rmax, Rtor, SPhi, DPhi ); 
}


G4Cons* X4SolidBase::MakeCone(const char* name, float z, float rmax1, float rmax2, float rmin1, float rmin2, float startphi, float deltaphi  )
{
    G4double pRmin1 = rmin1 ; 
    G4double pRmax1 = rmax1 ; 
    G4double pRmin2 = rmin2 ; 
    G4double pRmax2 = rmax2 ; 
    G4double pDz    = z/2.0 ; 
    G4double pSPhi  = startphi*CLHEP::pi/180. ; 
    G4double pDPhi  = deltaphi*CLHEP::pi/180. ;
    return new G4Cons( name, pRmin1, pRmax1, pRmin2, pRmax2, pDz, pSPhi, pDPhi  );
}

G4Trd* X4SolidBase::MakeTrapezoidCube(const char* name, float sz)
{
    return MakeTrapezoid( name, sz, sz, sz, sz, sz ); 
}

G4Trd* X4SolidBase::MakeTrapezoid(const char* name, float z,  float x1, float y1, float x2, float y2 )
{
    return new G4Trd(name, z, x1, y1, x2, y2 ); 
} 
G4Tubs* X4SolidBase::MakeTubs(const char* name, float rmin, float rmax, float hz, float startphi, float deltaphi )
{
    G4double pSPhi = startphi*CLHEP::pi/180. ; 
    G4double pDPhi = deltaphi*CLHEP::pi/180. ;

    return new G4Tubs(name, rmin, rmax, hz, pSPhi, pDPhi ); 
}

G4Orb* X4SolidBase::MakeOrb(const char* name, float radius )
{
    return new G4Orb(name, radius); 
}

G4Sphere* X4SolidBase::MakeZSphere(const char* name, float rmax, float rmin, float startTheta, float deltaTheta )
{
    G4String name_(name);
    G4double pRmin = rmin ; 
    G4double pRmax = rmax ; 
    G4double pSPhi = 0. ; 
    G4double pDPhi = 2.*CLHEP::pi ;

    G4double pSTheta = startTheta*CLHEP::pi/180. ; 
    G4double pDTheta = deltaTheta*CLHEP::pi/180. ;

    G4Sphere* sp = new G4Sphere(name_, pRmin, pRmax, pSPhi, pDPhi, pSTheta, pDTheta );
    return sp ; 
}

G4Sphere* X4SolidBase::MakeSphere(const char* name, float rmax, float rmin)
{
   return MakeZSphere(name, rmax, rmin, 0.f, 180.f ); 

}

X4SolidBase::X4SolidBase( const G4VSolid* solid ) 
   :
   m_solid(solid),
   m_name(strdup(solid->GetName().c_str())),
   m_mesh(new X4Mesh(solid)),
   m_entityType(X4Entity::Type(solid->GetEntityType())),
   m_entityName(X4Entity::Name(m_entityType)),
   m_root(NULL)
{
}

nnode* X4SolidBase::root() const 
{
    return m_root ; 
}
void X4SolidBase::setRoot(nnode* root)
{
    assert( root ) ; 
    m_root = root ; 
}


// generated by x4-convert-cc- Mon Jun 11 20:34:50 HKT 2018 
void X4SolidBase::convertBooleanSolid()
{  
    const G4BooleanSolid* const solid = static_cast<const G4BooleanSolid*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertMultiUnion()
{  
    const G4MultiUnion* const solid = static_cast<const G4MultiUnion*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertBox()
{  
    const G4Box* const solid = static_cast<const G4Box*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertCons()
{  
    const G4Cons* const solid = static_cast<const G4Cons*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertEllipticalCone()
{  
    const G4EllipticalCone* const solid = static_cast<const G4EllipticalCone*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertEllipsoid()
{  
    const G4Ellipsoid* const solid = static_cast<const G4Ellipsoid*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertEllipticalTube()
{  
    const G4EllipticalTube* const solid = static_cast<const G4EllipticalTube*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertExtrudedSolid()
{  
    const G4ExtrudedSolid* const solid = static_cast<const G4ExtrudedSolid*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertHype()
{  
    const G4Hype* const solid = static_cast<const G4Hype*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertOrb()
{  
    const G4Orb* const solid = static_cast<const G4Orb*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertPara()
{  
    const G4Para* const solid = static_cast<const G4Para*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertParaboloid()
{  
    const G4Paraboloid* const solid = static_cast<const G4Paraboloid*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertPolycone()
{  
    const G4Polycone* const solid = static_cast<const G4Polycone*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertGenericPolycone()
{  
    const G4GenericPolycone* const solid = static_cast<const G4GenericPolycone*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertPolyhedra()
{  
    const G4Polyhedra* const solid = static_cast<const G4Polyhedra*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertSphere()
{  
    const G4Sphere* const solid = static_cast<const G4Sphere*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTessellatedSolid()
{  
    const G4TessellatedSolid* const solid = static_cast<const G4TessellatedSolid*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTet()
{  
    const G4Tet* const solid = static_cast<const G4Tet*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTorus()
{  
    const G4Torus* const solid = static_cast<const G4Torus*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertGenericTrap()
{  
    const G4GenericTrap* const solid = static_cast<const G4GenericTrap*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTrap()
{  
    const G4Trap* const solid = static_cast<const G4Trap*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTrd()
{  
    const G4Trd* const solid = static_cast<const G4Trd*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTubs()
{  
    const G4Tubs* const solid = static_cast<const G4Tubs*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertCutTubs()
{  
    const G4CutTubs* const solid = static_cast<const G4CutTubs*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTwistedBox()
{  
    const G4TwistedBox* const solid = static_cast<const G4TwistedBox*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTwistedTrap()
{  
    const G4TwistedTrap* const solid = static_cast<const G4TwistedTrap*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTwistedTrd()
{  
    const G4TwistedTrd* const solid = static_cast<const G4TwistedTrd*>(m_solid);
    assert(solid); 
    assert(0) ; 
}
void X4SolidBase::convertTwistedTubs()
{  
    const G4TwistedTubs* const solid = static_cast<const G4TwistedTubs*>(m_solid);
    assert(solid); 
    assert(0) ; 
}

