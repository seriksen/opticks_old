opticks-site-source(){ echo $BASH_SOURCE ; }
opticks-site-vi(){       vi $BASH_SOURCE ; }
opticks-site-(){     source $BASH_SOURCE ; }

opticks-site-usage(){ cat << EOU 
$FUNCNAME
===================

This opticks-site.bash script is intended to be the shared
single script that users must source to configure access to 
an Opticks binary release, shared cache and Geant4 installation. 

The script contains absolute paths to various other scripts
that administrators must customize appropriately for the
installation layout onto file systems accessible from GPU cluster 
and gateway nodes.  

Instructions for GPU cluster users
-------------------------------------

One line is needed in your batch jobs to configure usage of 
the Opticks binary release, namely::

    source $(opticks-site-path)

This line will also be needed in your .bash_profile on the cluster gateway node (eg lxslc7)
in order to build executables that link against libraries of the release.

To understand or debug use the below bash functions for these instructions
or to dump the paths and their existance::

    opticks-site-usage
    opticks-site-info
    opticks-site-check


Details of what this script does 
----------------------------------

Specifically this script sources other scripts that 
define bash functions starting with:

1. opticks-release 
2. opticks-envg4
3. opticks-sharedcache 

For more details of these see::

    opticks-release-usage
    opticks-envg4-usage
    opticks-sharedcache-usage



Example of Building against the release
----------------------------------------

Clone the opticks source::

   cd
   hg clone http://bitbucket.org/simoncblyth/opticks
   cd opticks/examples/Geant4/CerenkovMinimal

   cat go-release.sh    # examine the cmake command line  

Notice the usage of the below bash functions::

   opticks-release-prefix    : $(opticks-release-prefix)
   opticks-envg4-Geant4_DIR  : $(opticks-envg4-Geant4_DIR)
   opticks-release-user-home : $(opticks-release-user-home)

These configure where the build will look for the Opticks 
and Geant4 installations and where the build products will 
be written. In this case 

Also examine CMakeLists.txt which configures the Makefile 
that will be generated by cmake::

   cat CMakeLists.txt

To configure, build and install simply::

   ./go-release.sh 

To run the CerenkovMinimal executable in a batch 
script on the GPU cluster, create a job script
similar to the demojob.sh created below::

   opticks-site-demojob- > demojob.sh 
   vi demojob.sh  # check it

Then submit it and check the queue::

   sbatch demojob.sh   
   squeue 


Instructions for Site Adminstrators
-------------------------------------

1. copy this script from an Opticks source clone into a convenient location, eg::

    . ~/opticks/bin/opticks-site.bash
    opticks-site-deploy         ## check the command
    opticks-site-deploy | sh    ## run by piping to shell

2. customize the absolute paths contained appropriately::

    source $(opticks-site-path)
    opticks-site-vi

3. basic test with eg::

      source $(opticks-site-path)

      opticks-site-usage
      opticks-site-info
      opticks-site-check

4. test by using a GPU cluster batch job that does::

       #!/bin/bash
       #SBATCH   ...slurm setup for GPU usage as instructed by admin...

       source $(opticks-site-path)
       opticks-site-info 
       opticks-release-info 
       opticks-release-test 

5. instruct users regarding the one line they will need to 
   configure use of the Opticks release 


FUNCTIONS
----------

opticks-site-main
    function that is run on sourcing this script

opticks-site-info
    dump paths

opticks-site-check
    check existance of paths

opticks-site-diff
    difference between the source and deployed copy of this script

opticks-site-deploy
    copies source to the delployed location of this script. 
    Requires the source script to have been sourced not the deployed one. 

opticks-site-path
    deployed location of this script


TODO
-----

* avoid all use of "blyth" paths, as they are too prone to change
  and hence unpredictable breakages

  * eg g4-envg4 will modify the envg4 

* currently okdist-opticks-site-deploy as invoked by okdist-create will stomp on any 
  admin customizations made to this script in its depoyed location, 
  instead keep site customizations in an ini file or smth and grab them with this 


EOU
}


##################  start of paths that will need customization for each site


opticks-site-user-prefix(){      echo /hpcfs/juno/junogpu ; }

opticks-site-user-home(){        echo $(opticks-site-user-prefix)/$USER ; } 
opticks-site-user-tmp(){         echo $(opticks-site-user-prefix)/$USER/tmp ; } 

opticks-site-envg4(){            echo $(opticks-site-user-prefix)/blyth/local/opticks/externals/opticks-envg4.bash ; }
opticks-site-sharedcache(){      echo $(opticks-site-user-prefix)/blyth/opticks.ihep.ac.cn/sc/releases/OpticksSharedCache-0.0.0_alpha/bin/opticks-sharedcache.bash ; }
opticks-site-path(){             echo $(opticks-site-user-prefix)/blyth/opticks.ihep.ac.cn/opticks-site.bash ; }
opticks-site-release-base(){     echo $(opticks-site-user-prefix)/blyth/local/opticks/releases ; }
#opticks-site-release-base(){    echo /cvmfs/opticks.ihep.ac.cn/ok/releases ; }

opticks-site-release-version(){  echo Opticks-0.0.0_alpha/x86_64-slc7-gcc48-geant4_10_04_p02-dbg  ; }

opticks-site-release(){          echo $(opticks-site-release-base)/$(opticks-site-release-version)/bin/opticks-release.bash ; }

##################  end of paths that will need customization for each site




opticks-site-diff()
{
    local msg="=== $FUNCNAME : "
    local path=$(opticks-site-path)
    local src=$(opticks-site-source)
    local cmd="diff $src $path"
    [ "$path" == "$src" ] && echo $msg src and path are same $path nothing to do && return 0
    echo $cmd
    eval $cmd
}

opticks-site-deploy()
{
    local msg="=== $FUNCNAME : "
    local path=$(opticks-site-path)
    local src=$(opticks-site-source)

    [ "$path" == "$src" ] && echo $msg src and path are same $path nothing to do && return 0

    local cmd="cp $src $path"
    echo $cmd 
    eval $cmd 
}



opticks-site-info(){ cat << EOI
$FUNCNAME
===================

   opticks-site-source       : $(opticks-site-source)
   opticks-site-path         : $(opticks-site-path)

   opticks-site-envg4        : $(opticks-site-envg4)
   opticks-site-sharedcache  : $(opticks-site-sharedcache)
   opticks-site-release      : $(opticks-site-release)

    
   opticks-site-release-version   : $(opticks-site-release-version)
   opticks-site-release-base      : $(opticks-site-release-base)

   opticks-site-user-prefix       : $(opticks-site-user-prefix)
   opticks-site-user-home         : $(opticks-site-user-home)
   opticks-site-user-tmp          : $(opticks-site-user-tmp)  

EOI
}


opticks-site-check-(){ cat << EOC
opticks-site-source
opticks-site-path
opticks-site-envg4
opticks-site-sharedcache
opticks-site-release
opticks-site-release-base
opticks-site-user-prefix
opticks-site-user-home
opticks-site-user-tmp
EOC
}

opticks-site-check(){ 
   local func
   $FUNCNAME- | while read func ; do
      local path=$($func)
      local f=$(test -f $path && echo f || echo " ") 
      local d=$(test -d $path && echo d || echo " ") 
      local x=$(test -x $path && echo x || echo " ") 
      printf " %3s %-30s %s \n" "$f$d$x"  "$func" "$path" 
   done
}





opticks-site-demojob-(){ cat << EOJ
#!/bin/bash

#SBATCH --partition=gpu
#SBATCH --qos=debug
#SBATCH --account=junogpu
#SBATCH --job-name=scb
#SBATCH --ntasks=1
#SBATCH --output=/hpcfs/juno/junogpu/$USER/out/%j.out
#SBATCH --error=/hpcfs/juno/junogpu/$USER/out/%j.err
#SBATCH --mem-per-cpu=20480
#SBATCH --gres=gpu:v100:1

# define some bash functions

job-vi(){ vi \$BASH_SOURCE ; }  

job-head(){ 
   echo \$FUNCNAME    
   hostname 
   date 
   nvidia-smi   
   env | grep OPTICKS_
   env | grep TMP
}

job-tail(){
   local rc=\$?    # capture the return code of prior command
   echo \$FUNCNAME : rc \$rc              
}

job-setup()
{
   echo \$FUNCNAME    
   source $(opticks-site-path)   # only this line is mandatory  
   opticks-site-info
   opticks-site-check
   opticks-release-info 
   #opticks-release-test    # runs > 400 test executables, taking 2-3 minutes 
}

job-body()
{
   unset OPTICKS_GEOCACHE_PREFIX   # needed for simple geometry testing to prevent attempts to write into geocache

   which CerenkovMinimal    # it should be in your PATH, if the above go-release.sh script succeded
   CerenkovMinimal          # run the executable 
}


# run the bash functions

job-head
job-setup 
job-body
job-tail

EOJ
}







opticks-site-main()
{
    export OPTICKS_USER_HOME=$(opticks-site-user-home)

    export  TMP=$(opticks-site-user-tmp)

    source $(opticks-site-envg4) 

    source $(opticks-site-release)

    source $(opticks-site-sharedcache)

    export PATH=$OPTICKS_USER_HOME/lib:$PATH          ## place for user libs and executables, used by the examples 
}

opticks-site-main


