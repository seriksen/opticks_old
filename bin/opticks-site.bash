opticks-site-source(){ echo $BASH_SOURCE ; }
opticks-site-(){     source $BASH_SOURCE ; }

opticks-site-source-local(){  echo ${BASH_SOURCE/.bash/-local.bash} ; }
opticks-site-vi(){       vi $(opticks-site-source) $(opticks-site-source-local) ; }

opticks-site-usage(){ cat << EOU 
$FUNCNAME
===================

This opticks-site.bash script is intended to be the shared
single script that users must source to configure access to 
an Opticks binary release, shared cache and Geant4 installation. 

The sidecar local script contains absolute site specific 
paths that administrators must customize appropriately for the
installation that must be accessible from GPU cluster 
and gateway nodes.  

Instructions for GPU cluster users
-------------------------------------

One line is needed in your batch jobs to configure usage of 
the Opticks binary release, namely::

    source $(opticks-site-path)

This line will also be needed in your .bash_profile on the cluster gateway node (eg lxslc7)
in order to build executables that link against libraries of the release.

To understand or debug use the below bash functions for these instructions
or to dump the paths and their existance::

    opticks-site-usage
    opticks-site-info
    opticks-site-check
    opticks-site-vi


Details of what this script does 
----------------------------------

Specifically this script sources other scripts that 
define bash functions starting with:

1. opticks-release 
2. opticks-envg4
3. opticks-sharedcache 

For more details of these see::

    opticks-release-usage
    opticks-envg4-usage
    opticks-sharedcache-usage


Testing the release with a GPU cluster batch job
----------------------------------------------------

Create a job script using the below commands::

   opticks-site-okjob- > okjob.sh 
   vi okjob.sh         # check it

Then submit it and check the queue::

   sbatch okjob.sh   
   squeue 

Outputs are written into directories::

   opticks-site-user-out : $(opticks-site-user-out)
   opticks-site-user-tmp : $(opticks-site-user-tmp)

Look at the "NNNNN.out" to see how many of the tests failed.


Building an executable that links against the release using CMake
---------------------------------------------------------------------

Clone the opticks source::

   cd
   hg clone http://bitbucket.org/simoncblyth/opticks
   cd opticks/examples/Geant4/CerenkovMinimal

   cat go-release.sh    # examine the cmake command line  

Notice the usage of the below bash functions::

   opticks-release-prefix    : $(opticks-release-prefix)
   opticks-envg4-Geant4_DIR  : $(opticks-envg4-Geant4_DIR)
   opticks-release-user-home : $(opticks-release-user-home)

These configure where the build will look for the Opticks 
and Geant4 installations and where the build products will 
be written. 

Also examine CMakeLists.txt which configures the Makefile 
that will be generated by cmake::

   cat CMakeLists.txt

To configure, build and install simply::

   cd opticks/examples/Geant4/CerenkovMinimal
   ./go-release.sh 

To run the CerenkovMinimal executable in a batch 
script on the GPU cluster the previous okjob.sh script
can be used with a few small changes:

1. comment out "opticks-release-test"
2. uncomment CerenkovMinimal 


Instructions for Site Adminstrators
-------------------------------------

1. copy this script from an Opticks source clone into a convenient location, eg::

        . ~/opticks/bin/opticks-site.bash
        opticks-site-deploy         ## copies scripts into place

   This is now done automatically by the okdist-- funtion okdist-deploy-opticks-site

2. customize the absolute paths contained in the 2nd opticks-site-path-local script::

      source $(opticks-site-path)
      opticks-site-vi          # edits both main and sidecar local script

3. basic checking an installation with eg::

      source $(opticks-site-path)

      opticks-site-usage
      opticks-site-info
      opticks-site-check

4. instruct users regarding the one line they will need to 
   configure use of the Opticks release 


FUNCTIONS
----------

opticks-site-main
    function that is run on sourcing this script

opticks-site-info
    dump paths

opticks-site-check
    check existance of paths

opticks-site-diff
    difference between the source and deployed copy of this script

opticks-site-deploy
    copies source script to the deployed location, together with 
    the default local script only on first deploy. 
 
    Requires the source script to have been sourced not the deployed one. 

opticks-site-path
    deployed location of this script

opticks-site-path-local
    deployed location of the local customization script, 
    that this script sources


TODO
-----

* avoid all use of "blyth" paths, as they are too prone to change
  and hence unpredictable breakages

  * eg g4-envg4 will modify the envg4 


EOU
}



opticks-site-customization-notes(){ cat << EON

When the opticks-site.bash functions are sourced from the deployed location 
the below two functions give the same path::

   opticks-site-source-local
   opticks-site-path-local  

When the opticks-site.bash functions are sourced from their source location 
the deployed path may well not yet exist, so sourcing opticks-site-source-local 
has the advantage of still working for debugging purposes before deployment. 

EON
}

source $(opticks-site-source-local)   


opticks-site-info(){ cat << EOI
$FUNCNAME
===================

Most of the below bash functions are defined within the local 
customization script, which is sourced by this script:

   opticks-site-source       : $(opticks-site-source)
   opticks-site-source-local : $(opticks-site-source-local)

   opticks-site-path         : $(opticks-site-path)
   opticks-site-path-local   : $(opticks-site-path-local)

   opticks-site-user-prefix       : $(opticks-site-user-prefix)
   opticks-site-user-home         : $(opticks-site-user-home)
   opticks-site-user-tmp          : $(opticks-site-user-tmp)  
   opticks-site-user-out          : $(opticks-site-user-out)  


   opticks-site-envg4        : $(opticks-site-envg4)
   opticks-site-sharedcache  : $(opticks-site-sharedcache)

    
   opticks-site-release-version   : $(opticks-site-release-version)
   opticks-site-release-base      : $(opticks-site-release-base)

   opticks-site-release-dir       : $(opticks-site-release-dir)
   OPTICKS_SITE_RELEASE_DIR       : $OPTICKS_SITE_RELEASE_DIR   


   opticks-site-release           : $(opticks-site-release)


EOI
}



opticks-site-diff()
{
    local msg="=== $FUNCNAME : "

    local src=$(opticks-site-source)
    local path=$(opticks-site-path)
    local cmd="diff $src $path"

    [ "$path" == "$src" ] && echo $msg src and path are same $path nothing to do && return 0
    echo $cmd
    eval $cmd

    local lsrc=$(opticks-site-source-local)   # satellite for customization, initial example
    local lpath=$(opticks-site-path-local)    # satellite for customization, under adminstrators control

    cmd="diff $lsrc $lpath"
    echo $cmd
    eval $cmd
}

opticks-site-deploy-notes(){ cat << EON
$FUNCNAME
==========================

This canonically invoked from okdist-- with okdist-deploy-opticks-site 

EON
}


opticks-site-deploy()
{
    local msg="=== $FUNCNAME : "

    local src=$(opticks-site-source)
    local lsrc=$(opticks-site-source-local)   # sidecar for customization, initial example

    local path=$(opticks-site-path)
    local lpath=$(opticks-site-path-local)   # sidecar for customization, under adminstrators control

    [ "$path" == "$src" ] && echo $msg src and path are same $path nothing to do && return 0

    mkdir -p $(dirname $path)
    local cmd="cp $src $path"     # any changes to installed generic script are stomped 
    echo $cmd 
    eval $cmd 

    if [ ! -f "$lpath" ]; then    # only copies the local script when non-existing, so is under local admin control 
        cmd="cp $lsrc $lpath"
        echo $cmd 
        eval $cmd 
    else
        cmd="diff $lsrc $lpath"
        echo $cmd 
        eval $cmd 
    fi 
}

opticks-site-deploy-html()
{
    local msg="=== $FUNCNAME :"
    local script=$(opticks-site-path)
    if [ ! -f "$script" ]; then 
       echo $msg the usage text contains customized paths hence needs to be run when sourced from deployed location
       return 0   
    fi 

    local rst=$(dirname $script)/opticks-site-usage.rst
    local html=${rst/.rst/.html}

    echo $msg generating rst and html usage documentation
    echo $msg rst $rst
    echo $msg html $html

    opticks-site-usage > $rst
    rst2html5.py -stg $rst $html
}



opticks-site-check-(){ cat << EOC
opticks-site-source
opticks-site-source-local
opticks-site-path
opticks-site-path-local
opticks-site-envg4
opticks-site-sharedcache
opticks-site-release
opticks-site-release-base
opticks-site-user-prefix
opticks-site-user-home
opticks-site-user-tmp
opticks-site-user-out
EOC
}

opticks-site-check(){ 
   local func
   $FUNCNAME- | while read func ; do
      local path=$($func)
      local f=$(test -f $path && echo f || echo " ") 
      local d=$(test -d $path && echo d || echo " ") 
      local x=$(test -x $path && echo x || echo " ") 
      printf " %3s %-30s %s \n" "$f$d$x"  "$func" "$path" 
   done
}





opticks-site-okjob-(){ cat << EOJ
#!/bin/bash

#SBATCH --partition=gpu
#SBATCH --qos=debug
#SBATCH --account=junogpu
#SBATCH --job-name=okjob
#SBATCH --ntasks=1
#SBATCH --output=$(opticks-site-user-out)/%j.out
#SBATCH --error=$(opticks-site-user-out)/%j.err
#SBATCH --mem-per-cpu=20480
#SBATCH --gres=gpu:v100:1

# define some bash functions

job-vi(){ vi \$BASH_SOURCE ; }  

job-head(){ 
   echo \$FUNCNAME    
   hostname 
   nvidia-smi   
}

job-env(){
   env | grep OPTICKS_
   env | grep TMP
}

job-tail(){
   local rc=\$?    # capture the return code of prior command
   echo \$FUNCNAME : rc \$rc              
}

job-setup()
{
   echo \$FUNCNAME    
   source $(opticks-site-path)   # only this line is mandatory  
   opticks-site-info
   opticks-site-check
   opticks-release-info 
   opticks-release-test    # runs > 400 test executables, taking 2-3 minutes 
}

job-body()
{
   unset OPTICKS_GEOCACHE_PREFIX   # needed for simple geometry testing to prevent attempts to write into geocache

   # uncomment the below after succeeding to build the CerenkovMinimal example executable 
   #which CerenkovMinimal    # it should be in your PATH, if the above go-release.sh script succeded
   #CerenkovMinimal          # run the executable 
}


# run the bash functions

job-head
job-setup 
job-env
job-body
job-tail

EOJ
}



opticks-site-main-notes(){ cat << EON
$FUNCNAME
==========

opticks-site-envg4
    hookup Geant4 data envvars and libs via LD_LIBRARY_PATH

opticks-site-release
    exports OPTICKS_INSTALL_PREFIX, PATH (bin,lib,py/opticks/ana), PYTHONPATH
    all based on opticks-release-prefix which comes from the directory of the opticks-release.bash script  

opticks-site-sharedcache
    exports OPTICKS_KEY, OPTICKS_GEOCACHE_PREFIX, OPTICKS_RNGCACHE_PREFIX

EON
}



opticks-site-main()
{
    export OPTICKS_USER_HOME=$(opticks-site-user-home)

    export  TMP=$(opticks-site-user-tmp)

    source $(opticks-site-envg4) 

    source $(opticks-site-release)

    source $(opticks-site-sharedcache)

    export PATH=$OPTICKS_USER_HOME/lib:$PATH          ## place for user libs and executables, used by the examples 

    [ -d $(opticks-site-user-home) ] && mkdir -p $(opticks-site-user-out)    ## sbatch fails to run jobs when output dir doesnt exist 
}

opticks-site-main


