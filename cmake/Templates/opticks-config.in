#!/bin/sh

#-----------------------------------------------------------------------
# sh config query script for  Opticks @Opticks_VERSION@ on UNIX platforms
# Autogenerated by CMake DO NOT EDIT
#-----------------------------------------------------------------------


#-----------------------------------------------------------------------
# Determine location of this script.
# NB, we don't always use the result of this calculation, but it does not
# hurt to do it. Only possible error is if too long a chain of symbolic 
# links are used to point to the physical script.
#
# Resolve symbolic links to script - we should end up with a physical file
script="$0"
calldir=`pwd`
loopcount=""

while [ "x`readlink $script`" != "x" ] ; do
  preloc=`dirname $script`
  script=`readlink $script`

  if [ ${script##/} = ${script##~} ] ; then
    # The symbolic link was relative...
    script="$preloc/$script"
  fi
  loopcount="l$loopcount"

  if [ ${#loopcount} -gt 10 ] ; then
    echo "error: more than 10 symbolic links to opticks-config traversed."
    exit 1
  fi
done

# If we still have a relative path, then it must be relative to the 
# calling dir. NB we don't attempt to resolve directory symbolic 
# links or remove '.' or '..'
if [ ${script##/} = ${script##~} ] ; then
  script="$calldir/$script"
fi

#-----------------------------------------------------------------------
# Finally, grab the directory in which the script is located
# Used below should we be setup to be relocatable.
scriptloc=`dirname $script`


echo scriptloc $scriptloc


#-----------------------------------------------------------------------
# Expansion and calculation of all needed variables
#
prefix=@OPTICKS_CONFIG_INSTALL_PREFIX@
exec_prefix=@OPTICKS_CONFIG_EXECPREFIX@
libdir=@OPTICKS_CONFIG_LIBDIR@
includedirs="@OPTICKS_CONFIG_INCLUDE_DIRS@"


name="opticks"
description="Opticks toolkit for the simulation of the optical photons using the NVIDIA OptiX ray tracing engine"
version="@OPTICKS_VERSION@"

cflags="@CMAKE_CXX_FLAGS@ @GEANT4_CXXSTD_FLAGS@"



# - Includes and Libs
for g4incdir in ${includedirs} ; do
  cflags="${cflags} -I${g4incdir}"
done



libs_nonviz_(){ cat << EOL

-lSysRap
-lBoostRap
-lNPY
-lOpticksCore

-lAssimpRap
-lOpenMeshRap
-lGGeo
-lOpticksGeometry

-lOptiXRap
-lCUDARap
-lThrustRap
-lOKOP

EOL
}

libs_viz_(){ cat << EOL

-lOGLRap
-lOpticksGL
-lOK

EOL
}

libs_g4(){ cat << EOL
cfg4
okg4
EOL
}


notes(){ 



cat << EON

prefix      @OPTICKS_CONFIG_INSTALL_PREFIX@
exec_prefix @OPTICKS_CONFIG_EXECPREFIX@
libdir      @OPTICKS_CONFIG_LIBDIR@
includedirs @OPTICKS_CONFIG_INCLUDE_DIRS@

EON

}






# - If we have any X11 based feature, then we need the INTY_XT define and
# *may* need the X11 includes
if test "x${geant4_uses_x11}" = "xyes" ; then
  vis_cflags="-DG4INTY_USE_XT @G4_X11_CFLAGS@ ${vis_cflags}"
fi




help()
{
  cat<<EOF
Usage: opticks-config [OPTION...]
  --prefix                output installation prefix of Opticks
  --version               output version for Opticks
  --libs                  output all linker flags
  --cflags                output all preprocessor
                          and compiler flags

  --libs-without-gui      output linker flags without
                          GUI components
  --cflags-without-gui    output preprocessor and compiler
                          flags without GUI components

Help options:
  -?, --help              show this help message
  --usage                 display brief usage message
EOF

  exit 1
}

usage()
{
  cat<<EOF
Usage: opticks-config [--prefix] [--version] [--libs] [--cflags] 
EOF
  exit 1
}




if test $# -eq 0 ; then
  usage
fi

while test $# -gt 0 ; do
  case "$1" in
    -*=*)
      optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'`
      ;;
    *)
      optarg=
      ;;
  esac

  case "$1" in
    --prefix)
      echo ${prefix}
      ;;

    --version)
      echo ${version}
      ;;

    --libs)
      echo "-L${libdir}" $(libs_nonviz_)  $(libs_viz_) 
      ;;

    --cflags)
      echo ${cflags}
      ;;

    --libs-without-gui)
      echo "-L${libdir}" $(libs_nonviz_)
      ;;

    --cflags-without-gui)
      echo ${cflags}
      ;;

    -?)
      help
      ;;

    --help)
      help
      ;;

    --usage)
      usage
      ;;

    --notes)
      notes
      ;;


    *)
      usage
      ;;
  esac

  shift
done

exit 0
