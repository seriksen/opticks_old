/*
 * Copyright (c) 2019 Opticks Team. All Rights Reserved.
 *
 * This file is part of Opticks
 * (see https://bitbucket.org/simoncblyth/opticks).
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.  
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

#pragma once

/**

OPTICKS_LOG
===============

Umbrella logging header bringing in logging headers from all linked Opticks subprojects 
allowing the logging of each subproject to be individually controlled.

The header was generated by sysrap-genlog-hh Sat Mar 23 20:08:11 CST 2019

To regenerate the sysrap/OPTICKS_LOG.hh header use commandline::

     sysrap-;sysrap-genlog

**/

#ifdef OPTICKS_SYSRAP
#include "SYSRAP_LOG.hh"
#endif
#ifdef OPTICKS_BRAP
#include "BRAP_LOG.hh"
#endif
#ifdef OPTICKS_NPY
#include "NPY_LOG.hh"
#endif
#ifdef OPTICKS_YOG
#include "YOG_LOG.hh"
#endif
#ifdef OPTICKS_OKCORE
#include "OKCORE_LOG.hh"
#endif
#ifdef OPTICKS_GGEO
#include "GGEO_LOG.hh"
#endif
#ifdef OPTICKS_ASIRAP
#include "ASIRAP_LOG.hh"
#endif
#ifdef OPTICKS_MESHRAP
#include "MESHRAP_LOG.hh"
#endif
#ifdef OPTICKS_OKGEO
#include "OKGEO_LOG.hh"
#endif
#ifdef OPTICKS_CUDARAP
#include "CUDARAP_LOG.hh"
#endif
#ifdef OPTICKS_THRAP
#include "THRAP_LOG.hh"
#endif
#ifdef OPTICKS_OXRAP
#include "OXRAP_LOG.hh"
#endif
#ifdef OPTICKS_OKOP
#include "OKOP_LOG.hh"
#endif
#ifdef OPTICKS_OGLRAP
#include "OGLRAP_LOG.hh"
#endif
#ifdef OPTICKS_OKGL
#include "OKGL_LOG.hh"
#endif
#ifdef OPTICKS_OK
#include "OK_LOG.hh"
#endif
#ifdef OPTICKS_X4
#include "X4_LOG.hh"
#endif
#ifdef OPTICKS_CFG4
#include "CFG4_LOG.hh"
#endif
#ifdef OPTICKS_OKG4
#include "OKG4_LOG.hh"
#endif
#ifdef OPTICKS_G4OK
#include "G4OK_LOG.hh"
#endif

#include "SYSRAP_API_EXPORT.hh"

#include "PLOG.hh"
// NB must implement in header as this code is required to live in the main, not in a lib

class SYSRAP_API OPTICKS_LOG_ {
   public:
       // initialize all linked loggers and hookup the main logger
       static void Initialize(PLOG* instance, void* app1, void* app2 )
       {
           int max_level = instance->parse("info") ;  
           // note : can decrease verbosity from the max_level in the subproj, but not increase

#ifdef OPTICKS_SYSRAP
    SYSRAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "SYSRAP"), app1, NULL );
#endif
#ifdef OPTICKS_BRAP
    BRAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "BRAP"), app1, NULL );
#endif
#ifdef OPTICKS_NPY
    NPY_LOG::Initialize(instance->prefixlevel_parse( max_level, "NPY"), app1, NULL );
#endif
#ifdef OPTICKS_YOG
    YOG_LOG::Initialize(instance->prefixlevel_parse( max_level, "YOG"), app1, NULL );
#endif
#ifdef OPTICKS_OKCORE
    OKCORE_LOG::Initialize(instance->prefixlevel_parse( max_level, "OKCORE"), app1, NULL );
#endif
#ifdef OPTICKS_GGEO
    GGEO_LOG::Initialize(instance->prefixlevel_parse( max_level, "GGEO"), app1, NULL );
#endif
#ifdef OPTICKS_ASIRAP
    ASIRAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "ASIRAP"), app1, NULL );
#endif
#ifdef OPTICKS_MESHRAP
    MESHRAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "MESHRAP"), app1, NULL );
#endif
#ifdef OPTICKS_OKGEO
    OKGEO_LOG::Initialize(instance->prefixlevel_parse( max_level, "OKGEO"), app1, NULL );
#endif
#ifdef OPTICKS_CUDARAP
    CUDARAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "CUDARAP"), app1, NULL );
#endif
#ifdef OPTICKS_THRAP
    THRAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "THRAP"), app1, NULL );
#endif
#ifdef OPTICKS_OXRAP
    OXRAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "OXRAP"), app1, NULL );
#endif
#ifdef OPTICKS_OKOP
    OKOP_LOG::Initialize(instance->prefixlevel_parse( max_level, "OKOP"), app1, NULL );
#endif
#ifdef OPTICKS_OGLRAP
    OGLRAP_LOG::Initialize(instance->prefixlevel_parse( max_level, "OGLRAP"), app1, NULL );
#endif
#ifdef OPTICKS_OKGL
    OKGL_LOG::Initialize(instance->prefixlevel_parse( max_level, "OKGL"), app1, NULL );
#endif
#ifdef OPTICKS_OK
    OK_LOG::Initialize(instance->prefixlevel_parse( max_level, "OK"), app1, NULL );
#endif
#ifdef OPTICKS_X4
    X4_LOG::Initialize(instance->prefixlevel_parse( max_level, "X4"), app1, NULL );
#endif
#ifdef OPTICKS_CFG4
    CFG4_LOG::Initialize(instance->prefixlevel_parse( max_level, "CFG4"), app1, NULL );
#endif
#ifdef OPTICKS_OKG4
    OKG4_LOG::Initialize(instance->prefixlevel_parse( max_level, "OKG4"), app1, NULL );
#endif
#ifdef OPTICKS_G4OK
    G4OK_LOG::Initialize(instance->prefixlevel_parse( max_level, "G4OK"), app1, NULL );
#endif
       }
       // checking the loggers in each subproj by emitting message at all loglevels
       static void Check()
       {
#ifdef OPTICKS_SYSRAP
    SYSRAP_LOG::Check("SYSRAP");
#endif
#ifdef OPTICKS_BRAP
    BRAP_LOG::Check("BRAP");
#endif
#ifdef OPTICKS_NPY
    NPY_LOG::Check("NPY");
#endif
#ifdef OPTICKS_YOG
    YOG_LOG::Check("YOG");
#endif
#ifdef OPTICKS_OKCORE
    OKCORE_LOG::Check("OKCORE");
#endif
#ifdef OPTICKS_GGEO
    GGEO_LOG::Check("GGEO");
#endif
#ifdef OPTICKS_ASIRAP
    ASIRAP_LOG::Check("ASIRAP");
#endif
#ifdef OPTICKS_MESHRAP
    MESHRAP_LOG::Check("MESHRAP");
#endif
#ifdef OPTICKS_OKGEO
    OKGEO_LOG::Check("OKGEO");
#endif
#ifdef OPTICKS_CUDARAP
    CUDARAP_LOG::Check("CUDARAP");
#endif
#ifdef OPTICKS_THRAP
    THRAP_LOG::Check("THRAP");
#endif
#ifdef OPTICKS_OXRAP
    OXRAP_LOG::Check("OXRAP");
#endif
#ifdef OPTICKS_OKOP
    OKOP_LOG::Check("OKOP");
#endif
#ifdef OPTICKS_OGLRAP
    OGLRAP_LOG::Check("OGLRAP");
#endif
#ifdef OPTICKS_OKGL
    OKGL_LOG::Check("OKGL");
#endif
#ifdef OPTICKS_OK
    OK_LOG::Check("OK");
#endif
#ifdef OPTICKS_X4
    X4_LOG::Check("X4");
#endif
#ifdef OPTICKS_CFG4
    CFG4_LOG::Check("CFG4");
#endif
#ifdef OPTICKS_OKG4
    OKG4_LOG::Check("OKG4");
#endif
#ifdef OPTICKS_G4OK
    G4OK_LOG::Check("G4OK");
#endif
       }
};

#define OPTICKS_LOG_COLOR__(argc, argv) {      PLOG_COLOR(argc, argv);     OPTICKS_LOG_::Initialize(PLOG::instance, plog::get(), NULL );  }  
#define OPTICKS_LOG__(argc, argv) {      PLOG_(argc, argv);     OPTICKS_LOG_::Initialize(PLOG::instance, plog::get(), NULL ); } 
#define OPTICKS_LOG(argc, argv) {      PLOG_COLOR(argc, argv);     OPTICKS_LOG_::Initialize(PLOG::instance, plog::get(), NULL ); } 

