photon-polarization-testauto-SR
==================================


ISSUE : testauto giving NaN polarizaton for SR
-------------------------------------------------

Getting NaN in photon polarization::


     71 __device__ void psave( Photon& p, optix::buffer<float4>& pbuffer, unsigned int photon_offset)
     72 {
     73     pbuffer[photon_offset+0] = make_float4( p.position.x,    p.position.y,    p.position.z,     p.time );
     74     pbuffer[photon_offset+1] = make_float4( p.direction.x,   p.direction.y,   p.direction.z,    p.weight );
     75     pbuffer[photon_offset+2] = make_float4( p.polarization.x,p.polarization.y,p.polarization.z, p.wavelength );
     76     pbuffer[photon_offset+3] = make_float4( p.flags.f.x,     p.flags.f.y,     p.flags.f.z,      p.flags.f.w);
     77 }
     78 



::

    tboolean-;tboolean-box-ip

    In [2]: ab.dvtabs[2]
    Out[2]: 
    ox_dv maxdvmax:3.0517578125e-05 maxdv:[3.0517578125e-05, nan] 
     0000            :                          TO SA :  391943   391952  :    391558 6264928/      0: 0.000  mx/mn/av 3.052e-05/     0/1.907e-06  eps:0.0002    
     0001            :                       TO SR SA :  207533   207524  :    207394 3318304/      0: 0.000  mx/mn/av    nan/   nan/   nan  eps:0.0002    


    In [8]: dvt.dvs[1].av
    Out[8]: 
    A()sliced
    A([[[-133.4443,   -1.4124, -450.    ,    2.5346],
            [   0.    ,    0.    ,   -1.    ,    1.    ],
            [      nan,       nan,       nan,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[ -44.3963, -116.7347, -450.    ,    2.5346],
            [   0.    ,    0.    ,   -1.    ,    1.    ],
            [      nan,       nan,       nan,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[ -43.5826, -147.5403, -450.    ,    2.5346],
            [   0.    ,    0.    ,   -1.    ,    1.    ],
            [      nan,       nan,       nan,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           ..., 
           [[-144.0839,  450.    ,  -23.8085,    2.2011],
            [   0.    ,    1.    ,    0.    ,    1.    ],
            [      nan,       nan,       nan,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[  71.1732,  450.    ,   56.2633,    2.2011],
            [   0.    ,    1.    ,    0.    ,    1.    ],
            [      nan,       nan,       nan,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[ -91.8347,  450.    ,   29.8083,    2.2011],
            [   0.    ,    1.    ,    0.    ,    1.    ],
            [      nan,       nan,       nan,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]]], dtype=float32)

    In [9]: dvt.dvs[1].bv
    Out[9]: 
    A()sliced
    A([[[-133.4443,   -1.4124, -450.    ,    2.5346],
            [   0.    ,    0.    ,   -1.    ,    1.    ],
            [   0.    ,    1.    ,    0.    ,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[ -44.3963, -116.7347, -450.    ,    2.5346],
            [   0.    ,    0.    ,   -1.    ,    1.    ],
            [   0.    ,    1.    ,    0.    ,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[ -43.5826, -147.5403, -450.    ,    2.5346],
            [   0.    ,    0.    ,   -1.    ,    1.    ],
            [   0.    ,    1.    ,    0.    ,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           ..., 
           [[-144.0839,  450.    ,  -23.8085,    2.2011],
            [   0.    ,    1.    ,    0.    ,    1.    ],
            [   0.    ,    0.    ,    1.    ,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[  71.1732,  450.    ,   56.2633,    2.2011],
            [   0.    ,    1.    ,    0.    ,    1.    ],
            [   0.    ,    0.    ,    1.    ,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]],

           [[ -91.8347,  450.    ,   29.8083,    2.2011],
            [   0.    ,    1.    ,    0.    ,    1.    ],
            [   0.    ,    0.    ,    1.    ,  380.    ],
            [   0.    ,    0.    ,    0.    ,    0.    ]]], dtype=float32)

    In [10]: 



::


    In [16]: ab.a.ox[:20,2]
    Out[16]: 
    A()sliced
    A([[   0.,   -1.,    0.,  380.],
           [  nan,   nan,   nan,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [   0.,   -1.,    0.,  380.],
           [  nan,   nan,   nan,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [  nan,   nan,   nan,  380.],
           [   0.,   -1.,    0.,  380.],
           [   0.,   -1.,    0.,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.]], dtype=float32)

    In [18]: ab.a.ox.shape
    Out[18]: (600000, 4, 4)

    In [20]: ab.a.seqhis.shape
    Out[20]: (600000,)

    In [21]: ab.a.seqhis[:20]
    Out[21]: 
    A()sliced
    A([ 141, 2221,  141,  141,  141,  141, 2221, 2221,  141, 2221,  141,  141,  141,  141,  141, 2221,  141,  141, 2221, 2221], dtype=uint64)

    In [22]: hex(2221)
    Out[22]: '0x8ad'


    In [23]: ab.selhis = "TO SR SA"

    In [25]: ab.a.ox[:20,2]
    Out[25]: 
    A()sliced
    A([[  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.],
           [  nan,   nan,   nan,  380.]], dtype=float32)

    In [27]: ab.a.ox.shape
    Out[27]: (207533, 4, 4)

    In [28]: ab.a.rpol()
    Out[28]: 
    A()sliced
    A([[[ 0., -1.,  0.],
            [-1., -1., -1.],
            [-1., -1., -1.]],

           [[ 0., -1.,  0.],
            [-1., -1., -1.],
            [-1., -1., -1.]],

           [[ 0., -1.,  0.],
            [-1., -1., -1.],
            [-1., -1., -1.]],

           ..., 
           [[ 0.,  0., -1.],
            [-1., -1., -1.],
            [-1., -1., -1.]],

           [[ 0.,  0., -1.],
            [-1., -1., -1.],
            [-1., -1., -1.]],

           [[ 0.,  0., -1.],
            [-1., -1., -1.],
            [-1., -1., -1.]]], dtype=float32)

    In [29]: ab.b.rpol()
    Out[29]: 
    A()sliced
    A([[[ 0., -1.,  0.],
            [ 0.,  1.,  0.],
            [ 0.,  1.,  0.]],

           [[ 0., -1.,  0.],
            [ 0.,  1.,  0.],
            [ 0.,  1.,  0.]],

           [[ 0., -1.,  0.],
            [ 0.,  1.,  0.],
            [ 0.,  1.,  0.]],

           ..., 
           [[ 0.,  0., -1.],
            [ 0.,  0.,  1.],
            [ 0.,  0.,  1.]],

           [[ 0.,  0., -1.],
            [ 0.,  0.,  1.],
            [ 0.,  0.,  1.]],

           [[ 0.,  0., -1.],
            [ 0.,  0.,  1.],
            [ 0.,  0.,  1.]]], dtype=float32)



