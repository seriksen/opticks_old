ckm_cerenkov_generation_align_small_quantized_deviation_g4_g4
================================================================

* context :doc:`ckm_cerenkov_generation_align`

::

   ckm--        
       G4 example style CerenkovMinimal, with Opticks embedded via G4OK, 
       collecting gensteps 

       * bi-simulation, OK using bouncemax 0 making ox.npy comparable with so.npy  

   ckm-gentest
       CCerenkovGenerationTest generating G4 Cerenkov process style generation 
       of Cerenkov photons from the gensteps. The photons are collected with 
       C4PhotonCollector::collectSecondaryPhotons

       * mono-simulation "G4" only 

   ckm-so 
       compare the photons from the above two 



FIXED : G4-G4 wavelength deviations of genstep 0 at 1e-5 level 
------------------------------------------------------------------

* fixed by replacing dp (Pmax-Pmin) whicg dp2 (Pmax2-Pmin2) which 
  avoids loss of precision from difference of two float travelled small numbers


::

    epsilon:1 blyth$ ckm-so
    # source/evt/g4live/natural/-1/so.npy tests/CCerenkovGeneratorTest/so.npy
    import numpy as np, commands

    apath = "source/evt/g4live/natural/-1/so.npy"
    bpath = "tests/CCerenkovGeneratorTest/so.npy"

    print " ckm-xx- comparing so.npy and so.npy between two dirs " 

    print "  ", commands.getoutput("date")
    print "a ", commands.getoutput("ls -l %s" % apath)
    print "b ", commands.getoutput("ls -l %s" % bpath)

    a = np.load(apath)
    b = np.load(bpath)

    print "a %s " % repr(a.shape)
    print "b %s " % repr(b.shape)

    dv = np.max( np.abs(a[:,:3]-b[:,:3]), axis=(1,2) )

    cut = 1e-5
    wh = np.where( dv > cut )[0] 
    print " deviations above cut %s wh %s num_wh %d" % ( cut, repr(wh), len(wh) )
    for i in wh:
        print i, dv[i], "\n",np.hstack([a[i,:3],(a[i,:3]-b[i,:3])/cut,b[i,:3]])


    args: /opt/local/bin/ipython -i /tmp/blyth/opticks/ckm/ckm-so.py
     ckm-xx- comparing so.npy and so.npy between two dirs 
       Sat Sep  8 16:36:48 CST 2018
    a  -rw-r--r--  1 blyth  staff  14224 Sep  8 15:09 source/evt/g4live/natural/-1/so.npy
    b  -rw-r--r--  1 blyth  staff  14224 Sep  8 16:02 tests/CCerenkovGeneratorTest/so.npy
    a (221, 4, 4) 
    b (221, 4, 4) 
     deviations above cut 1e-05 wh array([ 11,  20,  23,  30,  37,  81,  91, 106, 116, 129, 149, 153, 157, 168, 175, 195, 217]) num_wh 17
    11 1.5258789e-05 
    [[  0.3261  -0.0653  -0.0131   0.0012   0.003    0.       0.      -0.033    0.3261  -0.0653  -0.0131   0.0012]
     [  0.8373   0.1958  -0.5104   1.       0.       0.0015   0.       0.       0.8373   0.1958  -0.5104   1.    ]
     [ -0.5159   0.5917  -0.6194 173.2261  -0.006    0.       0.      -1.5259  -0.5159   0.5917  -0.6194 173.2261]]
    20 1.5258789e-05 
    [[  0.1764  -0.0353  -0.0071   0.0007   0.       0.       0.      -0.1668   0.1764  -0.0353  -0.0071   0.0007]
     [  0.824   -0.0863   0.56     1.       0.       0.0015   0.006    0.       0.824   -0.0863   0.56     1.    ]
     [ -0.5339   0.2129   0.8183 225.6083   0.      -0.0015   0.      -1.5259  -0.5339   0.2129   0.8183 225.6083]]



Largest deviations by far in wavelength exhibit quantization, I've seen that before several times.
Potentially rearranging the calc (suspect the h_Planck*c_light) can avoid the loss of precision.
Or switching some wavelength calculations from floats to doubles might avoid the discrepancy::

    :set nowrap

    In [2]: a[:,2,3]
    Out[2]: 
    array([ 79.0277,  64.7407, 548.7668,  61.7771,  64.4733, 123.2384,  86.7476, 342.7441, 117.8821, 109.3267,  75.7048, 173.2261,  81.6398, 147.9871,  85.1391, 174.5106, 162.5099,  72.7494, 277.77  ,
           123.5169, 225.6083,  93.8313, 167.6152, 130.9077, 206.6848,  67.5551,  89.2702,  64.3895,  98.4576, 102.3028, 148.9391,  80.7324, 181.2109,  92.7293,  97.1287, 142.5959, 202.6614, 131.1252,
           374.9776,  90.9865, 177.908 ,  75.4274, 221.5182, 131.5636, 579.5532, 105.2722,  80.8811, 149.3335, 195.2076,  60.8645,  64.805 , 243.2596, 248.062 ,  95.5747,  82.2436, 534.6089,  79.9717,
            63.5332,  70.2041,  93.7485, 186.9358, 648.9679,  70.976 ,  80.8478,  94.1366,  91.3074, 106.3398,  72.6019, 468.2738, 115.8758,  60.5063,  67.5606,  60.0227, 226.574 , 125.4183, 143.3505,
           123.1239, 204.5349, 570.6711,  79.9497, 112.9581, 169.4574,  72.8764, 310.8695,  75.0887, 425.5308, 319.5373, 214.4684,  78.8575,  91.6571, 279.3283, 712.3975, 257.3839, 116.1608,  73.2316,
            84.4979, 169.8288,  73.015 , 133.1829,  77.9709, 273.4775, 100.1011,  62.8888, 122.4117,  60.9665,  60.5976, 437.5226,  73.6779,  93.8359, 162.9223,  69.3967, 308.0741, 206.8569, 281.0906,
           354.0475,  70.9378, 216.0976,  69.1427,  71.2186, 395.1858,  72.5484,  62.245 ,  64.9126,  62.8659,  67.1596, 122.2048, 243.1878,  99.848 , 281.5753, 229.8984, 102.4251, 111.8704,  89.9378,
            96.5338, 387.9238,  88.474 , 418.489 ,  60.7484, 337.4237,  86.13  , 169.2958, 173.2219,  90.8782, 100.5663, 102.6608,  76.9098, 130.5398,  73.0516, 276.8902, 669.2324, 129.1481, 178.1693,
            80.4022, 148.645 ,  82.2096, 180.9816, 478.1989, 347.0385, 701.7363, 307.0316,  98.3666,  68.2406, 117.2317, 118.3642, 250.1153, 307.9542, 109.4113,  93.5827, 156.5334, 141.4091, 102.7313,
           116.6907,  79.3124,  66.3532,  90.0335, 138.0788, 102.4005,  72.3957,  91.2472,  66.1942,  75.7314,  62.9483, 100.5314,  61.2778, 320.2833, 113.136 , 125.5672, 123.0379,  73.3235,  60.7833,
            64.9003,  65.0813, 186.2178,  97.9955,  94.4072, 249.8319,  63.7631,  63.26  , 250.7668, 105.0116,  64.8669, 159.1434,  82.9787,  63.0955,  81.6907,  60.3963, 112.7277,  93.8711, 133.5138,
            71.7063,  70.6572, 268.3157,  77.3328,  87.9134, 254.3371, 501.4822,  93.0721, 192.1853,  72.5816, 135.4417, 332.5084], dtype=float32)

    In [3]: b[:,2,3]
    Out[3]: 
    array([ 79.0277,  64.7407, 548.7668,  61.7771,  64.4733, 123.2384,  86.7476, 342.7441, 117.8821, 109.3267,  75.7048, 173.2261,  81.6398, 147.9871,  85.1391, 174.5106, 162.5099,  72.7494, 277.77  ,
           123.5169, 225.6083,  93.8313, 167.6152, 130.9077, 206.6848,  67.5551,  89.2702,  64.3895,  98.4576, 102.3028, 148.9391,  80.7324, 181.2109,  92.7293,  97.1287, 142.5959, 202.6614, 131.1252,
           374.9776,  90.9865, 177.908 ,  75.4274, 221.5182, 131.5636, 579.5532, 105.2722,  80.8811, 149.3335, 195.2076,  60.8645,  64.805 , 243.2596, 248.062 ,  95.5747,  82.2436, 534.6089,  79.9717,
            63.5332,  70.2041,  93.7485, 186.9358, 648.9679,  70.976 ,  80.8478,  94.1366,  91.3074, 106.3398,  72.6019, 468.2738, 115.8758,  60.5063,  67.5606,  60.0227, 226.574 , 125.4183, 143.3505,
           123.1239, 204.5349, 570.6711,  79.9497, 112.9581, 169.4574,  72.8764, 310.8695,  75.0887, 425.5308, 319.5373, 214.4684,  78.8575,  91.6571, 279.3283, 712.3975, 257.3839, 116.1608,  73.2316,
            84.4979, 169.8288,  73.015 , 133.1829,  77.9709, 273.4775, 100.1011,  62.8888, 122.4117,  60.9665,  60.5976, 437.5226,  73.678 ,  93.8359, 162.9223,  69.3968, 308.0741, 206.8569, 281.0906,
           354.0475,  70.9378, 216.0977,  69.1427,  71.2186, 395.1858,  72.5484,  62.245 ,  64.9126,  62.8659,  67.1596, 122.2048, 243.1878,  99.848 , 281.5753, 229.8984, 102.4251, 111.8704,  89.9378,
            96.5338, 387.9238,  88.474 , 418.489 ,  60.7484, 337.4237,  86.13  , 169.2958, 173.2219,  90.8782, 100.5664, 102.6608,  76.9098, 130.5398,  73.0516, 276.8902, 669.2323, 129.1481, 178.1693,
            80.4022, 148.645 ,  82.2096, 180.9816, 478.1989, 347.0385, 701.7363, 307.0316,  98.3666,  68.2406, 117.2317, 118.3642, 250.1153, 307.9542, 109.4113,  93.5827, 156.5334, 141.4091, 102.7313,
           116.6907,  79.3124,  66.3532,  90.0335, 138.0789, 102.4005,  72.3957,  91.2472,  66.1942,  75.7314,  62.9483, 100.5314,  61.2778, 320.2833, 113.136 , 125.5672, 123.0379,  73.3235,  60.7833,
            64.9003,  65.0813, 186.2178,  97.9955,  94.4072, 249.8319,  63.7631,  63.26  , 250.7668, 105.0116,  64.8669, 159.1434,  82.9787,  63.0955,  81.6907,  60.3963, 112.7277,  93.8711, 133.5138,
            71.7063,  70.6572, 268.3157,  77.3328,  87.9134, 254.3371, 501.4822,  93.0721, 192.1853,  72.5816, 135.4417, 332.5084], dtype=float32)

    In [4]: a[:,2,3]-b[:,2,3]
    Out[4]: 
    array([ 0.    ,  0.    ,  0.    , -0.    ,  0.    , -0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,
           -0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    , -0.    , -0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,
            0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,
            0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    , -0.    ,  0.    ,  0.    ,
            0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.0001,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    , -0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,
           -0.    , -0.    , -0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,
            0.    , -0.    ,  0.    , -0.    ,  0.    , -0.    , -0.    ,  0.    ,  0.    , -0.    ,  0.    , -0.    ,  0.    , -0.    ,  0.    ,  0.    , -0.    , -0.    ,  0.    ,  0.    ,  0.    ,
            0.    ,  0.    ,  0.0001,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    , -0.    ,  0.    ,
           -0.    ,  0.    , -0.    , -0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,
            0.    ,  0.    , -0.    ,  0.    , -0.    ,  0.    , -0.    , -0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    , -0.    , -0.    , -0.    ,  0.    ,  0.    ,
           -0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.    ,  0.    ,  0.    ,  0.    ], dtype=float32)

    In [5]: 1e6*(a[:,2,3]-b[:,2,3])
    Out[5]: 
    array([  0.    ,   0.    ,   0.    ,  -3.8147,   0.    ,  -7.6294,  -7.6294,   0.    ,   0.    ,   0.    ,   0.    , -15.2588,  -7.6294,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
             0.    , -15.2588,  -7.6294,   0.    , -15.2588,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,  -7.6294, -15.2588,  -7.6294,   0.    ,   0.    ,   0.    ,   0.    ,   0.    , -15.2588,
             0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,   0.    ,
             0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,   0.    ,   0.    ,  -3.8147,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,
             0.    ,   0.    ,   0.    ,   0.    ,  -7.6294, -15.2588,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,  61.0352,   0.    ,   0.    ,   0.    ,
             0.    ,   0.    ,  -7.6294,   0.    ,  -7.6294,   0.    ,   0.    ,  -3.8147,   0.    ,   0.    ,  -3.8147, -30.5176,  -7.6294,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,   0.    ,
             0.    ,   0.    , -15.2588,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,  -3.8147,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    , -15.2588,   0.    ,  -7.6294,  -7.6294,
             0.    ,   0.    ,  -7.6294,   0.    ,  -3.8147,   0.    ,  -7.6294,   0.    ,   0.    ,  -7.6294,  -7.6294,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,  61.0352,   0.    ,   0.    ,
             0.    , -15.2588,   0.    ,   0.    ,   0.    , -30.5176,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,  -7.6294,   0.    , -15.2588,   0.    ,  -7.6294,
            -7.6294,   0.    ,   0.    ,   0.    , -15.2588,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,  -3.8147,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
             0.    ,  -7.6294,   0.    ,  -7.6294,   0.    , -15.2588,  -3.8147,  -3.8147,   0.    ,   0.    ,   0.    ,   0.    ,  -7.6294,   0.    ,   0.    ,  -3.8147,  -7.6294,  -7.6294,   0.    ,
             0.    ,  -7.6294,   0.    ,  -7.6294,   0.    ,   0.    ,   0.    ,   0.    , -15.2588,   0.    ,   0.    ,   0.    ], dtype=float32)

    In [6]: -7.6294*2
    Out[6]: -15.2588

    In [7]: -3.8147*2
    Out[7]: -7.6294



::

        kineticEnergy/eV,        // temporary switch from weight 



Fractional deviation in the energy::

    In [19]: 1e6*(a[:,1,3] - b[:,1,3])/a[:,1,3]
    Out[19]: 
    array([ 0.    ,  0.    ,  0.    ,  0.095 ,  0.0992,  0.0948,  0.    ,  0.    ,  0.0907,  0.    ,  0.    ,  0.    ,  0.0628,  0.    ,  0.0655,  0.    ,  0.    ,  0.1119,  0.1068,  0.    ,  0.0868,
            0.0722,  0.    ,  0.    ,  0.    ,  0.    ,  0.0687,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0713,  0.    ,  0.    ,  0.0779,  0.    ,  0.    ,  0.07  ,  0.    ,  0.    ,
            0.0852,  0.    ,  0.    ,  0.    ,  0.0622,  0.1149,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0633,  0.    ,  0.0615,  0.    ,  0.108 ,  0.0721,  0.    ,  0.    ,  0.    ,
            0.    ,  0.    ,  0.0702,  0.    ,  0.    ,  0.    ,  0.0891,  0.    ,  0.    ,  0.0923,  0.    ,  0.    ,  0.    ,  0.0947,  0.0787, -0.1097,  0.    ,  0.    ,  0.0652,  0.    ,  0.    ,
            0.    ,  0.    ,  0.0614,  0.    ,  0.0607,  0.    ,  0.1074,  0.    ,  0.099 ,  0.    ,  0.    ,  0.065 ,  0.0653,  0.    ,  0.    ,  0.    ,  0.    ,  0.077 ,  0.    ,  0.    ,  0.    ,
            0.    ,  0.    ,  0.1133,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.1081,  0.    ,  0.1091,  0.    ,  0.    ,  0.    ,  0.076 ,  0.    ,  0.    ,  0.0999,  0.0967,  0.    ,  0.    ,
            0.    ,  0.    ,  0.    ,  0.0884,  0.0788,  0.086 ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0666,  0.    ,  0.    ,  0.079 ,  0.    ,  0.    ,
            0.1124,  0.    ,  0.    ,  0.    ,  0.0685,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    , -0.0675,  0.    ,  0.0757,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,
            0.0602,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.1114,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0943,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,
            0.0935,  0.    ,  0.1001,  0.    ,  0.0754,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0612,  0.0638,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,
            0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0716,  0.0739,  0.1117,  0.    ,  0.    ], dtype=float32)


Pmin and dp=Pmax-Pmin are in MeV so small 10-5 level numbers::

    276          sampledEnergy = Pmin + rand * dp;             


A difference between the two is that for the generation from gensteps the 
params are persisted as floats during travel.  Perhaps should redefine the gensteps 
such that energies travel as eV rather that the default MeV  ?

::

    150     G4double Pmin = q4.y ;
    151     G4double Pmax = q4.z ;
    152 
    153     G4double wavelength_min = h_Planck*c_light/Pmax ;
    154     G4double wavelength_max = h_Planck*c_light/Pmin ;
    155 
    156     //G4double maxCos = q4.w ;
    157 
    158     LOG(info)
    159         << " Pmin " << Pmin
    160         << " Pmax " << Pmax
    161         << " wavelength_min(nm) " << wavelength_min/nm
    162         << " wavelength_max(nm) " << wavelength_max/nm
    163         << " meanVelocity " << meanVelocity
    164         ;
    165 
    166     G4double maxSin2 = q5.x ;
    167     G4double MeanNumberOfPhotons1 = q5.y ;
    168     G4double MeanNumberOfPhotons2 = q5.z ;
    169     G4double zero = q5.w ;
    170     G4double epsilon = 1e-6 ;
    171     assert( std::abs(zero) < epsilon ) ;     // caution with mixed buffers
    172     // am i storing a int in there, get a very small number ?
    173 
    174     G4double dp = Pmax - Pmin;




Avoiding use of the float constrained dp param from gensteps knocks the deviations
down an order of magnitude to 1e-6 level rather than 1e-5

* TODO: this fix is not possible on GPU : so see if having the energies travel as eV rather 
  than MeV can avoid the precision loss too : which will work on GPU too

::

    096 G4VParticleChange* CCerenkovGenerator::GeneratePhotonsFromGenstep( const OpticksGenstep* gs, unsigned idx ) // static 
     97 {
     98     unsigned num_gs = gs->getNumGensteps();
     99     bool have_gs = idx < num_gs ;
    100 
    ...
    196     G4double Pmin2 = Rindex->GetMinLowEdgeEnergy();
    197     G4double Pmax2 = Rindex->GetMaxLowEdgeEnergy();
    198     G4double dp2 = Pmax2 - Pmin2;
    199 
    200     bool Pmin_match = std::abs( Pmin2 - Pmin ) < epsilon ;
    201     bool Pmax_match = std::abs( Pmax2 - Pmax ) < epsilon ;
    202   
    ...
    275       do {
    276          rand = G4UniformRand();
    277          //sampledEnergy = Pmin + rand * dp; 
    278          sampledEnergy = Pmin2 + rand * dp2 ;
    279          sampledRI = Rindex->Value(sampledEnergy);
    280          cosTheta = BetaInverse / sampledRI;
    281 




FIXED : G4-G4 time deviations of genstep 0 at 1e-6 level 
------------------------------------------------------------------


::

    epsilon:cfg4 blyth$ ckm-;ckm-so
    # source/evt/g4live/natural/-1/so.npy tests/CCerenkovGeneratorTest/so.npy
    import numpy as np, commands

    apath = "source/evt/g4live/natural/-1/so.npy"
    bpath = "tests/CCerenkovGeneratorTest/so.npy"

    print " ckm-xx- comparing so.npy and so.npy between two dirs " 

    print "  ", commands.getoutput("date")
    print "a ", commands.getoutput("ls -l %s" % apath)
    print "b ", commands.getoutput("ls -l %s" % bpath)

    a = np.load(apath)
    b = np.load(bpath)

    print "a %s " % repr(a.shape)
    print "b %s " % repr(b.shape)

    dv = np.max( np.abs(a[:,:3]-b[:,:3]), axis=(1,2) )

    print "max deviation %s " % dv.max() 

    cuts = [1e-5, 1e-6]
    for cut in cuts:
        wh = np.where( dv > cut )[0] 
        print " deviations above cut %s num_wh %d" % ( cut, len(wh) )
        for i in wh:
            print i, dv[i], "\n",np.hstack([a[i,:3],(a[i,:3]-b[i,:3])/cut,b[i,:3]])
        pass
    pass


    args: /opt/local/bin/ipython -i /tmp/blyth/opticks/ckm/ckm-so.py
     ckm-xx- comparing so.npy and so.npy between two dirs 
       Sat Sep  8 18:47:16 CST 2018
    a  -rw-r--r--  1 blyth  staff  14224 Sep  8 16:59 source/evt/g4live/natural/-1/so.npy
    b  -rw-r--r--  1 blyth  staff  14224 Sep  8 17:24 tests/CCerenkovGeneratorTest/so.npy
    a (221, 4, 4) 
    b (221, 4, 4) 
    max deviation 1.668639e-06 
     deviations above cut 1e-05 num_wh 0
     deviations above cut 1e-06 num_wh 122
    1 1.5592668e-06 
    [[ 0.1281 -0.0257 -0.0052  0.0005  0.0149  0.0019  0.     -1.5593  0.1281 -0.0257 -0.0052  0.0005]
     [ 0.899   0.3471  0.2671 19.1509 -0.0596  0.0298  0.0298  0.      0.899   0.3471  0.2671 19.1509]
     [-0.4331  0.7949  0.4249 64.7407 -0.0298  0.      0.      0.     -0.4331  0.7949  0.4249 64.7407]]
    3 1.6429694e-06 
    [[ 0.1936 -0.0388 -0.0078  0.0007  0.      0.      0.     -1.643   0.1936 -0.0388 -0.0078  0.0007]
     [ 0.6925 -0.6786  0.2446 20.0696  0.      0.      0.      0.      0.6925 -0.6786  0.2446 20.0696]
     [-0.7104 -0.5827  0.3947 61.7771  0.      0.      0.      0.     -0.7104 -0.5827  0.3947 61.7771]]
    6 1.6571721e-06 
    [[ 0.1865 -0.0374 -0.0075  0.0007  0.0149  0.     -0.0005 -1.6572  0.1865 -0.0374 -0.0075  0.0007]
     [ 0.8716  0.336  -0.3568 14.2925  0.      0.0298  0.      0.      0.8716  0.336  -0.3568 14.2925]
     [-0.4699  0.7801 -0.4131 86.7476 -0.0298  0.      0.      0.     -0.4699  0.7801 -0.4131 86.7476]]

    ...


Deviates all in same direction, b is larger::

    :set nowrap

    In [2]: a[:,0,3]
    Out[2]: 
    array([0.0002, 0.0005, 0.0013, 0.0007, 0.0012, 0.0013, 0.0007, 0.0013, 0.0006, 0.0012, 0.0009, 0.0012, 0.0002, 0.0004, 0.0001, 0.0006, 0.0012, 0.0006, 0.0011, 0.0012, 0.0007, 0.0008, 0.0009, 0.0007,
           0.0008, 0.0008, 0.0001, 0.0011, 0.0013, 0.0006, 0.0009, 0.0005, 0.0002, 0.0002, 0.0007, 0.0009, 0.0007, 0.0003, 0.0013, 0.0013, 0.0003, 0.0011, 0.0001, 0.0003, 0.0012, 0.0005, 0.0005, 0.0003,
           0.0011, 0.0006, 0.0011, 0.0007, 0.001 , 0.0001, 0.0005, 0.0002, 0.0001, 0.0004, 0.001 , 0.0003, 0.0008, 0.0012, 0.0011, 0.0002, 0.0012, 0.0009, 0.0007, 0.0007, 0.    , 0.0012, 0.0002, 0.0011,
           0.0003, 0.0009, 0.0008, 0.0003, 0.0011, 0.0003, 0.0002, 0.0003, 0.0011, 0.0003, 0.0008, 0.0002, 0.0002, 0.    , 0.0012, 0.001 , 0.0011, 0.0003, 0.0012, 0.0011, 0.0013, 0.0009, 0.0011, 0.0011,
           0.0011, 0.0005, 0.001 , 0.0001, 0.    , 0.0011, 0.0012, 0.0005, 0.0012, 0.0004, 0.0008, 0.001 , 0.0004, 0.0011, 0.0009, 0.0007, 0.0001, 0.0012, 0.0008, 0.0008, 0.0008, 0.0007, 0.0007, 0.0004,
           0.0013, 0.0002, 0.0002, 0.0012, 0.0008, 0.0012, 0.0006, 0.0003, 0.    , 0.0002, 0.0009, 0.0009, 0.0003, 0.001 , 0.0012, 0.0011, 0.0011, 0.0013, 0.0012, 0.0003, 0.0002, 0.0007, 0.001 , 0.0002,
           0.0008, 0.0011, 0.0008, 0.0012, 0.0004, 0.0002, 0.0004, 0.0004, 0.0009, 0.0003, 0.0007, 0.0011, 0.0008, 0.0001, 0.0001, 0.0006, 0.0005, 0.    , 0.0007, 0.0009, 0.0008, 0.0013, 0.0003, 0.0006,
           0.    , 0.0012, 0.0001, 0.0012, 0.0011, 0.0004, 0.0002, 0.0005, 0.0012, 0.0011, 0.0001, 0.0007, 0.0002, 0.0011, 0.0003, 0.0008, 0.0001, 0.0013, 0.0001, 0.0003, 0.0001, 0.0007, 0.0004, 0.0003,
           0.0008, 0.0011, 0.0003, 0.0011, 0.0012, 0.001 , 0.0009, 0.0012, 0.0013, 0.0006, 0.0007, 0.    , 0.0007, 0.0004, 0.0012, 0.0006, 0.0004, 0.0012, 0.0009, 0.0011, 0.0012, 0.0005, 0.0009, 0.0011,
           0.0001, 0.0007, 0.0012, 0.0007, 0.0012], dtype=float32)

    In [3]: b[:,0,3]
    Out[3]: 
    array([0.0002, 0.0005, 0.0013, 0.0007, 0.0012, 0.0013, 0.0007, 0.0013, 0.0006, 0.0012, 0.0009, 0.0012, 0.0002, 0.0004, 0.0001, 0.0006, 0.0012, 0.0006, 0.0011, 0.0012, 0.0007, 0.0008, 0.0009, 0.0007,
           0.0008, 0.0008, 0.0001, 0.0011, 0.0013, 0.0006, 0.0009, 0.0005, 0.0002, 0.0002, 0.0007, 0.001 , 0.0007, 0.0003, 0.0013, 0.0013, 0.0003, 0.0011, 0.0001, 0.0003, 0.0012, 0.0005, 0.0005, 0.0003,
           0.0011, 0.0006, 0.0011, 0.0007, 0.001 , 0.0001, 0.0005, 0.0002, 0.0001, 0.0004, 0.001 , 0.0003, 0.0008, 0.0012, 0.0011, 0.0002, 0.0012, 0.0009, 0.0007, 0.0007, 0.    , 0.0012, 0.0002, 0.0011,
           0.0003, 0.0009, 0.0008, 0.0003, 0.0011, 0.0003, 0.0002, 0.0003, 0.0011, 0.0003, 0.0008, 0.0002, 0.0002, 0.    , 0.0012, 0.001 , 0.0011, 0.0003, 0.0012, 0.0011, 0.0013, 0.0009, 0.0011, 0.0011,
           0.0011, 0.0005, 0.001 , 0.0001, 0.    , 0.0011, 0.0012, 0.0005, 0.0012, 0.0004, 0.0008, 0.001 , 0.0004, 0.0011, 0.0009, 0.0007, 0.0001, 0.0012, 0.0008, 0.0008, 0.0008, 0.0007, 0.0007, 0.0004,
           0.0013, 0.0002, 0.0002, 0.0012, 0.0008, 0.0012, 0.0006, 0.0003, 0.    , 0.0002, 0.0009, 0.0009, 0.0003, 0.001 , 0.0012, 0.0011, 0.0011, 0.0013, 0.0012, 0.0003, 0.0002, 0.0007, 0.001 , 0.0002,
           0.0008, 0.0011, 0.0008, 0.0012, 0.0004, 0.0002, 0.0004, 0.0004, 0.0009, 0.0003, 0.0007, 0.0011, 0.0008, 0.0001, 0.0001, 0.0006, 0.0005, 0.    , 0.0007, 0.0009, 0.0008, 0.0013, 0.0003, 0.0006,
           0.    , 0.0012, 0.0001, 0.0012, 0.0011, 0.0004, 0.0002, 0.0005, 0.0012, 0.0011, 0.0001, 0.0007, 0.0002, 0.0011, 0.0003, 0.0008, 0.0001, 0.0013, 0.0001, 0.0003, 0.0001, 0.0007, 0.0004, 0.0003,
           0.0008, 0.0011, 0.0003, 0.0011, 0.0012, 0.001 , 0.0009, 0.0012, 0.0013, 0.0006, 0.0007, 0.    , 0.0007, 0.0004, 0.0012, 0.0006, 0.0004, 0.0012, 0.0009, 0.0011, 0.0012, 0.0005, 0.0009, 0.0011,
           0.0001, 0.0007, 0.0012, 0.0007, 0.0012], dtype=float32)

    In [4]: a[:,0,3] - b[:,0,3]
    Out[4]: 
    array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
           -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
           -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
           -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
           -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
           -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.], dtype=float32)

    In [5]: 1e6*(a[:,0,3] - b[:,0,3])
    Out[5]: 
    array([-0.8818, -1.5593, -0.2421, -1.643 , -0.6563, -0.1019, -1.6572, -0.214 , -1.6456, -0.4591, -1.4025, -0.3297, -0.6947, -1.4374, -0.3209, -1.6645, -0.5987, -1.6434, -0.7985, -0.2813, -1.6678,
           -1.5437, -1.4745, -1.6423, -1.5598, -1.5821, -0.4735, -1.0235, -0.2407, -1.6686, -1.3288, -1.5414, -0.8692, -0.9252, -1.6388, -1.3168, -1.6683, -1.1406, -0.2033, -0.0331, -1.2355, -1.0196,
           -0.3769, -1.0807, -0.5582, -1.5718, -1.512 , -1.2836, -0.8293, -1.6358, -0.7526, -1.6618, -1.1278, -0.5886, -1.6023, -0.7066, -0.5191, -1.3695, -1.2645, -1.2424, -1.5402, -0.6737, -1.0238,
           -0.6829, -0.2719, -1.4954, -1.6473, -1.668 , -0.185 , -0.3937, -0.8288, -0.9618, -1.0534, -1.4491, -1.5897, -1.3093, -1.0073, -1.1267, -1.0217, -1.2455, -0.7737, -1.1673, -1.5632, -0.7119,
           -0.8864, -0.1037, -0.6565, -1.0852, -0.7919, -1.2309, -0.5956, -0.9864, -0.0815, -1.3814, -0.9345, -0.7141, -0.8044, -1.6018, -1.1701, -0.5063, -0.0513, -1.0149, -0.6387, -1.5533, -0.4498,
           -1.4486, -1.5692, -1.1976, -1.4446, -0.7141, -1.3312, -1.6527, -0.3582, -0.5438, -1.6077, -1.6057, -1.5385, -1.6501, -1.6678, -1.4879, -0.1416, -0.8775, -0.9226, -0.4139, -1.5825, -0.5959,
           -1.6667, -1.2295, -0.1388, -0.9241, -1.3769, -1.3939, -1.104 , -1.072 , -0.6862, -1.0247, -0.9605, -0.1385, -0.5666, -1.1727, -0.9744, -1.6626, -1.0956, -0.8679, -1.5739, -1.021 , -1.5837,
           -0.4577, -1.3557, -0.7704, -1.3401, -1.3293, -1.3232, -1.192 , -1.6651, -0.792 , -1.6062, -0.6054, -0.589 , -1.6577, -1.6044, -0.108 , -1.6502, -1.3285, -1.578 , -0.2199, -1.0456, -1.6643,
           -0.0906, -0.6342, -0.4482, -0.4754, -0.7295, -1.3463, -0.9635, -1.6156, -0.3651, -0.9238, -0.5917, -1.6577, -0.8779, -0.7584, -1.2761, -1.5613, -0.6254, -0.1142, -0.4666, -1.1395, -0.3898,
           -1.6575, -1.3523, -1.1895, -1.5821, -0.8063, -1.2894, -0.9011, -0.5063, -1.2672, -1.3236, -0.4325, -0.0595, -1.6684, -1.6338, -0.0795, -1.6449, -1.3279, -0.427 , -1.659 , -1.3642, -0.3256,
           -1.448 , -1.0011, -0.5797, -1.5894, -1.3624, -0.8813, -0.567 , -1.6647, -0.46  , -1.6642, -0.4407], dtype=float32)

    In [6]: 




Ahha, looks like a real difference : not just a precision handling deviation : as need to change
gensteps to hold both velocities rather than the mean.

CCerenkovGenerator.cc::

    413 #ifdef HAVE_CHANGED_GENSTEP_TO_STORE_BOTH_VELOCITIES
    414 
    415       G4double deltaTime = delta / (pPreStepPoint->GetVelocity()+
    416                                       rand*(pPostStepPoint->GetVelocity()-
    417                                             pPreStepPoint->GetVelocity())*0.5);
    418 
    419 #else
    420       G4double deltaTime = delta / meanVelocity ;
    421 #endif
    422 


L4Cerenkov.cc::

    436                 G4double delta = rand * aStep.GetStepLength();
    437 
    438                 G4double deltaTime = delta / (pPreStepPoint->GetVelocity()+
    439                                       rand*(pPostStepPoint->GetVelocity()-
    440                                             pPreStepPoint->GetVelocity())*0.5);
    441 
    442                 G4double aSecondaryTime = t0 + deltaTime;
    443 



FIXED by changing Cerenkov gensteps to carry both velocities, bringing deviation to 1e-8 level::


    args: /opt/local/bin/ipython -i /tmp/blyth/opticks/ckm/ckm-so.py
     ckm-xx- comparing so.npy and so.npy between two dirs 
       Sat Sep  8 19:40:34 CST 2018
    a  -rw-r--r--  1 blyth  staff  14224 Sep  8 19:37 source/evt/g4live/natural/-1/so.npy
    b  -rw-r--r--  1 blyth  staff  14224 Sep  8 19:37 tests/CCerenkovGeneratorTest/so.npy
    a (221, 4, 4) 
    b (221, 4, 4) 
    max deviation 5.9604645e-08 
     deviations above cut 1e-05 num_wh 0
     deviations above cut 1e-06 num_wh 0
     deviations above cut 1e-07 num_wh 0
     deviations above cut 1e-08 num_wh 182
    0 1.4901161e-08 
    [[ 0.054  -0.0108 -0.0022  0.0002  0.      0.      0.      0.      0.054  -0.0108 -0.0022  0.0002]
     [ 0.7963 -0.2246  0.5617 15.6887  0.      1.4901  0.      0.      0.7963 -0.2246  0.5617 15.6887]
     [-0.571   0.0272  0.8205 79.0277  0.     -0.7451  0.      0.     -0.571   0.0272  0.8205 79.0277]]
    1 5.9604645e-08 
    [[ 0.1281 -0.0257 -0.0052  0.0005  1.4901  0.1863  0.      0.      0.1281 -0.0257 -0.0052  0.0005]
     [ 0.899   0.3471  0.2671 19.1509 -5.9605  2.9802  2.9802  0.      0.899   0.3471  0.2671 19.1509]
     [-0.4331  0.7949  0.4249 64.7407 -2.9802  0.      0.      0.     -0.4331  0.7949  0.4249 64.7407]]
    2 2.9802322e-08 
    [[  0.331   -0.0663  -0.0133   0.0013   0.       0.7451   0.       0.       0.331   -0.0663  -0.0133   0.0013]
     [  0.8906   0.3689  -0.2661   2.2593   0.       2.9802   0.       0.       0.8906   0.3689  -0.2661   2.2593]
     [ -0.4403   0.8459  -0.301  548.7668  -2.9802   0.       0.       0.      -0.4403   0.8459  -0.301  548.7668]]



Deviation at 1e-8 level are not focussed anywhere, spread across position,direction,polarization.



